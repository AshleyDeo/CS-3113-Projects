#ifdef _WINDOWS
#include <GL/glew.h>
#endif
#include <SDL.h>
#include <SDL_opengl.h>
#include <SDL_image.h>
#include "Matrix.h"
#include "ShaderProgram.h"
//STB_image loads images
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

#ifdef _WINDOWS
#define RESOURCE_FOLDER ""
#else
#define RESOURCE_FOLDER "NYUCodebase.app/Contents/Resources/"
#endif

#include <vector>

SDL_Window* displayWindow;
//classes
class Vector3 {
public:
	Vector3() {}
	Vector3(float x, float y, float z);
	float x;
	float y;
	float z;

};
class Untxtrd {
public:
	Untxtrd(float x, float y, float z);
	void Draw(ShaderProgram *program);


	Matrix projectionMatrix;
	Matrix modelMatrix;
	Matrix viewMatrix;
	Vector3 position;
	Vector3 velocity;
	float angle = 0.0;
};

class Txtrd {
public:
	Txtrd(float x, float y, float z);
	void Draw(ShaderProgram *program);

	Matrix projectionMatrix;
	Matrix modelMatrix;
	Matrix viewMatrix;
	Vector3 position;
	Vector3 velocity;
	GLuint texture;
	float angle = 0.0;
};

//functions
GLuint LoadTexture(const char *filePath);
void Setup();
void Render(ShaderProgram *program, float& elapsed);

//vars
float lastFrameTicks = 0.0f;
std::vector<Untxtrd*> objects_untxtrd;
std::vector<Txtrd*> objects_txtrd;

int main(int argc, char *argv[])
{
	SDL_Init(SDL_INIT_VIDEO);
	displayWindow = SDL_CreateWindow("My Game", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 360, SDL_WINDOW_OPENGL);
	SDL_GLContext context = SDL_GL_CreateContext(displayWindow);
	SDL_GL_MakeCurrent(displayWindow, context);
#ifdef _WINDOWS
	glewInit();
#endif

	//Setup
	Setup();

	//untextured
	ShaderProgram program;
	program.Load(RESOURCE_FOLDER "vertex.glsl", RESOURCE_FOLDER "fragment.glsl");
	Untxtrd obj1(2.0, 0.0, 0.0);
	objects_untxtrd.push_back(&obj1);
	glUseProgram(program.programID);

	//textured
	ShaderProgram program2;
	program2.Load(RESOURCE_FOLDER"vertex_textured.glsl", RESOURCE_FOLDER"fragment_textured.glsl");
	
	Txtrd obj2(-2.0, 0.0, 0.0);
	Txtrd obj3(0.0, 1.5, 0.0);
	Txtrd obj4(0.0, -1.5, 0.0);

	obj2.texture = LoadTexture(RESOURCE_FOLDER"Images/playerRight.png");
	obj3.texture = LoadTexture(RESOURCE_FOLDER"Images/enemyUFO.png");
	obj4.texture = LoadTexture(RESOURCE_FOLDER"Images/meteorBig.png");

	objects_txtrd.push_back(&obj2);
	objects_txtrd.push_back(&obj3);
	objects_txtrd.push_back(&obj4);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glUseProgram(program2.programID);


	//End Setup
	//Running program
	SDL_Event event;
	bool done = false;
	while (!done) {
		while (SDL_PollEvent(&event)) {
			if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE) { // check if window close
				done = true;
			}
		}
		
		//Drawing
		float ticks = (float)SDL_GetTicks() / 1000.0f;
		float elapsed = ticks - lastFrameTicks;
		lastFrameTicks = ticks;
		obj1.angle += elapsed * 3.14 * 2; //multiply by mvmnt per sec
		obj3.angle += elapsed * 3.14 * 2;
		Render(&program2, elapsed);
		obj1.Draw(&program);

		//End Drawing
		SDL_GL_SwapWindow(displayWindow);
	}

	SDL_Quit();
	return 0;
}

GLuint LoadTexture(const char *filePath) {
	int w, h, comp;
	unsigned char* image = stbi_load(filePath, &w, &h, &comp, STBI_rgb_alpha);

	if (image == NULL) {
		std::cout << "Unable to load image. Make sure the path is correct\n";
		assert(false);
	}

	GLuint retTexture;
	glGenTextures(1, &retTexture);
	glBindTexture(GL_TEXTURE_2D, retTexture);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, image);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	stbi_image_free(image);
	return retTexture;
}
//Untextured
Untxtrd::Untxtrd(float x, float y, float z) : position(x, y, z) {
	projectionMatrix.SetOrthoProjection(-3.55, 3.55, -2.0f, 2.0f, -1.0f, 1.0f);
}
void Untxtrd::Draw(ShaderProgram *program) {
	modelMatrix.Identity();
	modelMatrix.Translate(position.x, position.y, position.z);
	modelMatrix.Rotate(angle);
	program->SetModelMatrix(modelMatrix);
	program->SetModelMatrix(modelMatrix);
	program->SetProjectionMatrix(projectionMatrix);
	program->SetViewMatrix(viewMatrix);
	float vertices1[] = { 0.5f, -0.5f, 0.0f, 0.5f, -0.5f, -0.5f };
	glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertices1);
	glEnableVertexAttribArray(program->positionAttribute);
	glDrawArrays(GL_TRIANGLES, 0, 3);
	glDisableVertexAttribArray(program->positionAttribute);
}
//Vector
Vector3::Vector3(float x, float y, float z):x(x), y(y), z(z){}

//Textured
Txtrd::Txtrd(float x, float y, float z):position(x, y, z) {
	projectionMatrix.SetOrthoProjection(-3.55, 3.55, -2.0f, 2.0f, -1.0f, 1.0f);
}
void Txtrd::Draw(ShaderProgram *program) {
	modelMatrix.Identity();
	modelMatrix.Translate(position.x, position.y, position.z);
	modelMatrix.Rotate(angle);
	program->SetModelMatrix(modelMatrix);
	program->SetProjectionMatrix(projectionMatrix);
	program->SetViewMatrix(viewMatrix);
	glBindTexture(GL_TEXTURE_2D, texture);

	float vertices[] = { -0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5 };
	glVertexAttribPointer(program->positionAttribute, 2, GL_FLOAT, false, 0, vertices);
	glEnableVertexAttribArray(program->positionAttribute);
	float texCoords[] = { 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0 };
	glVertexAttribPointer(program->texCoordAttribute, 2, GL_FLOAT, false, 0, texCoords);
	glEnableVertexAttribArray(program->texCoordAttribute);
	glDrawArrays(GL_TRIANGLES, 0, 6);
	glDisableVertexAttribArray(program->positionAttribute);
	glDisableVertexAttribArray(program->texCoordAttribute);
}
void Setup() {
	glViewport(0, 0, 640, 360);
}
void Render(ShaderProgram *program, float& elapsed) {
	glClear(GL_COLOR_BUFFER_BIT);
	glClearColor(0.25f, 0.3f, 0.25f, 1.0f);
	for (Txtrd* obj : objects_txtrd) {
		obj->Draw(program);
	}
}